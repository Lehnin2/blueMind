from groq import Groq
from configz import settings
from app.utils.helpers import is_arabic
from app.core.schemas import FishResponse
from typing import List
import json
import re

# Initialize Groq client
client = Groq(api_key=settings.GROQ_API_KEY)

def correct_query_with_groq(query: str) -> str:
    """
    Correct possible misspellings in the fish name using Groq.
    
    Args:
        query: The original query
        
    Returns:
        Corrected query
    """
    if is_arabic(query):
        return query
    
    try:
        chat_completion = client.chat.completions.create(
            messages=[{"role": "user", "content": f"Correct the fish name if misspelled: {query}"}],
            model=settings.LLM_MODEL,
            stream=False,
        )
        corrected_query = chat_completion.choices[0].message.content.strip()
        print(f"Corrected query: {query} -> {corrected_query}")
        return corrected_query
    except Exception as e:
        print(f"Error correcting query with Groq: {e}")
        return query

def clean_json_string(text: str) -> str:
    """
    Clean a JSON string by removing markdown, extra whitespace, and fixing common JSON errors.
    
    Args:
        text: Raw JSON string from Groq
        
    Returns:
        Cleaned JSON string
    """
    # Remove markdown code blocks
    text = re.sub(r'```json\s*|\s*```', '', text).strip()
    # Remove trailing commas before closing brackets
    text = re.sub(r',\s*([\]}])', r'\1', text)
    # Remove extra whitespace
    text = re.sub(r'\s+', ' ', text).strip()
    return text

def improve_results_with_groq(results: List[FishResponse]) -> List[FishResponse]:
    """
    Enhance fish information with descriptions and recipe suggestions generated by Groq.
    
    Args:
        results: List of fish results
        
    Returns:
        List of fish results with enhanced descriptions and recipe suggestions
    """
    improved_results = []
    
    for result in results:
        print(f"Processing fish: {result.nom_francais or result.nom_scientifique or 'Unknown'}")
        result.recipe_suggestions = getattr(result, 'recipe_suggestions', [])
        
        if result.improved_description and result.recipe_suggestions:
            print(f"Skipping LLM enhancement for {result.nom_francais or result.nom_scientifique}: already enhanced")
            improved_results.append(result)
            continue
            
        description_prompt = (
            f"Write a short informative paragraph about the fish named "
            f"{result.nom_francais or 'Unknown'} ({result.nom_scientifique or 'Unknown'}). "
            f"It is {'protected' if result.protected else 'not protected'} and "
            f"{'invasive' if result.invasive else 'not invasive'}. "
            f"If you know anything else about this species, add it."
        )
        
        try:
            # Generate description
            chat_completion = client.chat.completions.create(
                messages=[{"role": "user", "content": description_prompt}],
                model=settings.LLM_MODEL_DESCRIPTION,
                stream=False,
            )
            result.improved_description = chat_completion.choices[0].message.content.strip()
            print(f"Generated description: {result.improved_description[:50]}...")
            
            # Generate recipe suggestions
            recipe_prompt = (
                f"Suggest 3 popular dishes or recipes that can be made with the fish named "
                f"{result.nom_francais or result.nom_scientifique or 'Unknown'}. "
                f"Format your response as a JSON array with each recipe having 'name' and 'description' fields. "
                f"Keep descriptions to one sentence each. Return only the JSON array."
            )
            
            print(f"Sending recipe prompt: {recipe_prompt}")
            recipe_completion = client.chat.completions.create(
                messages=[
                    {"role": "system", "content": "You are a culinary expert. Return only valid JSON."},
                    {"role": "user", "content": recipe_prompt}
                ],
                model=settings.LLM_MODEL_DESCRIPTION,
                stream=False,
            )
            
            recipe_text = recipe_completion.choices[0].message.content.strip()
            print(f"Raw recipe response: {recipe_text}")
            
            # Clean JSON
            recipe_text = clean_json_string(recipe_text)
            
            try:
                recipes = json.loads(recipe_text)
                if not isinstance(recipes, list):
                    raise ValueError("Recipe response is not a JSON array")
                for recipe in recipes:
                    if not isinstance(recipe, dict) or 'name' not in recipe or 'description' not in recipe:
                        raise ValueError(f"Invalid recipe format: {recipe}")
                result.recipe_suggestions = recipes
                print(f"Parsed recipes: {recipes}")
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Error parsing recipe suggestions: {e}")
                result.recipe_suggestions = [
                    {
                        "name": f"{result.nom_francais or 'Fish'} Fillet",
                        "description": "Pan-fried fillet seasoned with herbs and lemon."
                    },
                    {
                        "name": f"{result.nom_francais or 'Fish'} Soup",
                        "description": "Hearty fish soup with vegetables and broth."
                    },
                    {
                        "name": f"Grilled {result.nom_francais or 'Fish'}",
                        "description": "Grilled fish with salt, pepper, and olive oil."
                    }
                ]
                print(f"Using fallback recipes: {result.recipe_suggestions}")
            
            improved_results.append(result)
        except Exception as e:
            print(f"Error improving results with Groq: {e}")
            result.improved_description = result.improved_description or "Description not available."
            result.recipe_suggestions = [
                {
                    "name": f"{result.nom_francais or 'Fish'} Fillet",
                    "description": "Pan-fried fillet seasoned with herbs and lemon."
                },
                {
                    "name": f"{result.nom_francais or 'Fish'} Soup",
                    "description": "Hearty fish soup with vegetables and broth."
                },
                {
                    "name": f"Grilled {result.nom_francais or 'Fish'}",
                    "description": "Grilled fish with salt, pepper, and olive oil."
                }
            ]
            print(f"Exception fallback recipes: {result.recipe_suggestions}")
            improved_results.append(result)
    
    return improved_results